{
	"name": "expression73",
	"description" : "expression execution + process output",
	"expressionDefinitions": {
		"main": {
			"expression": "!(test.expression)!.execute(expression:&(expression)&,parms:&(parms)&).subString(from:&(from)&,to:&(to)&)",
			"description": "complex data type",
			"constants": {
				"expression": {
							"dataTypeId": "test.expression",
							"value": {
								"expression": "!(test.string)!.subString(?(baseValue)?,from:&(from)&,to:&(to)&)",
								"description": "DataType.method, all constant",
								"constants": {
									"from": {
										"dataTypeId": "test.integer",
										"value": "3"
									},
									"to": {
										"dataTypeId": "test.integer",
										"value": "7"
									}
								},
								"variableCriterias": {
								}
							}
				},
				"parms" : {
					"dataTypeId": "test.map",
					"value": {
						"baseValue" : {
							"dataTypeId": "test.string",
							"value": "Thisismyworldabcdef"
						}		
					}
				},
				"from": {
					"dataTypeId": "test.integer",
					"value": "3"
				},
				"to": {
					"dataTypeId": "test.integer",
					"value": "7"
				}
			}
		},
	},
	"result" : {
		"dataTypeId": "test.string;1.0.0",
 		"value": "mffffff",
		"wapperType": "JSON"
	}
}
