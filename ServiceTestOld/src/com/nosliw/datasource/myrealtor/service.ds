[{
	"name": "myrealtor",
	"status":"disabled",
    "implementation" : "task",
	"description" : "my realtor data source",
	"output" : "test.array;1.0.0%||element:test.map;1.0.0%||geo:test.geo;1.0.0,schoolName:test.string;1.0.0,schoolRating:test.float;1.0.0,url:test.url;1.0.0||%||%",
	"request" : [ 
		{
			name : "schoolType",
			criteria : "test.options;1.0.0",
			default :{
				dataTypeId: "test.options;1.0.0",
				value: {
					value : "public",
					optionsId : "schoolType"
				}
			},
		},
		{
			name : "schoolRating",
			criteria : "test.float;1.0.0",
			default :{
				dataTypeId: "test.float;1.0.0",
				value: "5"
			},
		},
		{
			name : "buildingType",
			criteria : "test.array;1.0.0%||element:test.options;1.0.0||%",
			default :{
				dataTypeId: "test.array;1.0.0",
				value: [
					{
						dataTypeId: "test.options;1.0.0",
						value: {
							value : "House",
							"optionsId" : "buildingType"
						}
					},
				]
			},
		},
		{
			name : "fromPrice",
			criteria : "test.price;1.0.0",
			default :{
				dataTypeId: "test.price;1.0.0",
				value: {
					price : 400000.0,
					currency : "$"
				}
			},
		},
		{
			name : "toPrice",
			criteria : "test.price;1.0.0",
			default :{
				dataTypeId: "test.price;1.0.0",
				value: {
					price : 1000000.0,
					currency : "$"
				}
			},
		},
	],
	"configure" : {
		"tasks": [
			{
				"name" : "main",
				"type" : "expression",
				"steps" : [
					{
						"name" : "main1",
						"description" : "get school data, and save to variable",
						"type" : "expression",
						"expression": "<(school)>",
						"outputVariable" : "schoolData" 
					},
					{
						"name" : "main2",
						"description" : "get realtor data, and save to variable",
						"type" : "expression",
						"expression": "<(house)>",
						"outputVariable" : "houseData" 
					},
					
					{
						"name" : "main3",
						"description": "create empty output array",
						"type": "expression",
						"expression": "!(test.array)!.emptyArray()",
						"outputVariable": "output"
					},
					
					{
						"name" : "main4",
						"description": "loop through house data and add matched house to output",
						"type": "loop",
						"container": "?(houseData)?",
						"elementVariable": "house",
						"executeTask": "processHouse",
						"outputVariable": "output"
					},
				],
				"references": {
					"school": {
						"variablesMap": {
							schoolType : "schoolType",
							schoolRating : "schoolRating"
						}
					},
					"house": {
						"variablesMap": {
							buildingType : "buildingType",
							fromPrice : "fromPrice",
							toPrice : "toPrice"
						}
					},
					"processHouse": {
						"variablesMap": {
							"schoolData" : "schoolData",
							"house" : "house",
							"output" : "output",
							
						}
					},
				},
				"constants" : {
					"eleName" : {
						dataTypeId: "test.string;1.0.0",
						value: "house"
					},
					"processTaskName" : {
						dataTypeId: "test.string;1.0.0",
						value: "filterHouse"
					}
				}
			},
			{
				"description" : "process single house, if house has valid school, attach school information to it",
				"name" : "processHouse",
				"type" : "expression",
				"steps" : [
	
					{
						"name" : "processHouse1",
						"description": "create valid school variable",
						"type": "expression",
						"expression": "!(test.string)!.emptyString()",
						"outputVariable": "validSchool"
					},
				
					{
						"name" : "processHouse2",
						"description": "loop through all schools to find matched school",
						"type": "loop",
						"container": "?(schoolData)?",
						"elementVariable": "school",
						"executeTask": "houseSchoolMatch",
						"outputVariable": "validSchool",
						"break" : "?(validSchool)?.isEmpty().opposite()"
					},
					{
						"name" : "processHouse3",
						"description" : "",
						"type" : "branch",
						"expression": "?(validSchool)?.isEmpty()",
						"false" : {
							"next" : "merge"
						},
						"true" : {
							"next" : "exit"
						}
					},
					{
						"name" : "exit",
						"description" : "",
						"type" : "expression",
						"expression": "?(output)?",
						"exit" : true
					},
					{
						"name" : "merge",
						"description" : "",
						"type" : "expression",
						"expression": "?(output)?.add(child:?(house)?.setChildData(name:&(schoolAttributeName)&,value:?(validSchool)?))",
					},
				],
				"references": {
					"houseSchoolMatch" : {
						"variablesMap": {
							"validSchool" : "validSchool",
							"school" : "school",
							"house" : "house",
						}
					}
				},
				"variables" : {
					"schoolData" : "test.array;1.0.0%%||element:test.map;1.0.0%%||geo:test.geo;1.0.0,schoolName:test.string;1.0.0,score:test.double;1.0.0||%%||%%",
					"house" : "test.map;1.0.0%%||geo:test.geo;1.0.0||%%",
					"output": "test.array;1.0.0"
				},
				"constants" : {
					"eleName" : {
						dataTypeId: "test.string;1.0.0",
						value: "school"
					},
				}
			},
			{
				"description" : "if house match with a school",
				"name" : "houseSchoolMatch",
				"type" : "expression",
				"steps" : [
					{
						"name" : "houseSchoolMatch1",
						"description" : "",
						"type" : "branch",
						"expression": "?(validSchool)?.isEmpty()",
						"false" : {
							"next" : "exit"
						},
						"true" : {
							"next" : "match"
						}
					},
					{
						"name" : "exit",
						"description" : "aaaaaaaaaaa",
						"type" : "expression",
						"expression": "?(validSchool)?",
						"exit" : true
					},
					{
						"name" : "match",
						"description" : "find  ",
						"type" : "expression",
						"expression": "!(test.geo)!.distance(from:?(school)?.geo,to:?(house)?.geo).shorterThan(dis2:&(distance)&)",
						"outputVariable" : "isMatch" 
					},
					{
						"name" : "houseSchoolMatch2",
						"description" : "",
						"type" : "branch",
						"expression": "?(isMatch)?",
						"false" : {
							"next" : "exit"
						},
						"true" : {
							"next" : "setOutput"
						}
					},
					{
						"name" : "setOutput",
						"description" : "",
						"type" : "expression",
						"expression": "?(school)?.schoolName",
						"outputVariable" : "validSchool" 
					},
				],
				"references": {
				},
				"variables" : {
					"validSchool" : "test.string;1.0.0",
					"school" : "test.map;1.0.0%%||geo:test.geo;1.0.0,schoolName:test.string;1.0.0||%%",
					"house" : "test.map;1.0.0%%||geo:test.geo;1.0.0||%%",
				},
				"constants" : {
					"distance" : {
						dataTypeId: "test.distance;1.0.0",
						value: {
							distance : 2.0,
							unit : "km"
						}
					}
				}
			},
			{
				"description" : "get school data from school data source",
				"name" : "school",
				"type" : "dataSource",
				"dataSource" : "school",
				"parms" : {
					schoolType : "?(schoolType)?",
					schoolRating : "?(schoolRating)?"
				}
			},
			{
				"description" : "get house data from realtor data source",
				"name" : "house",
				"type" : "dataSource",
				"dataSource" : "realtor",
				"parms" : {
					buildingType : "?(buildingType)?",
					fromPrice : "?(fromPrice)?",
					toPrice : "?(toPrice)?"
				}
			},
		],
		"constants": {
			"schoolAttributeName" : {
				dataTypeId: "test.string;1.0.0",
				value: "schoolName"
			} 
		},
		"variables" : {
		},
	}
}]
