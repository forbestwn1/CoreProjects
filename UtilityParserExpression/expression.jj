
options {
	/*create static method */
	STATIC = false ;
	/* the location for parser classes */
	OUTPUT_DIRECTORY = "c:/Temp/JCCTree/expression";
/*	"/Users/pro/Desktop/WebToApp/CoreProject/Projects/ExpressionParser/src/com/nosliw/data/expression/parser";*/
}

PARSER_BEGIN(NosliwExpressionParser)
/* define the package name for parser classes */
package com.nosliw.data.imp.expression.parser.generated;

public class NosliwExpressionParser {

  public static void main(String args[]) throws ParseException, TokenMgrError {
		NosliwExpressionParser parser = new NosliwExpressionParser( System.in ) ;
		SimpleNode root = parser.Expression("");
		root.dump("");
  }  
}
PARSER_END(NosliwExpressionParser)



/*SKIP:{" " | "\t"}*/
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < COMMAR : "," > }
TOKEN : { < COLON : ":" > }
TOKEN : { < CONSTANT : (["0"-"9","a"-"z","A"-"Z", "{", "}", "[", "]", "_", "#", " ", "\t", "\n", "\r", "'", "|", "@", "-", "$", "%", "*", "\\", "+", "=", "^", ";", "<", ">"])+ > }
/*TOKEN : { < NAME : (["0"-"9","a"-"z","A"-"Z"])+ > }*/
TOKEN : { < OPEN_CONSTANT : "&(" > }
TOKEN : { < CLOSE_CONSTANT : ")&" > }
TOKEN : { < OPEN_DATATYPE : "!(" > }
TOKEN : { < CLOSE_DATATYPE : ")!" > }
TOKEN : { < OPEN_VARIABLE : "?(" > }
TOKEN : { < CLOSE_VARIABLE : ")?" > }
TOKEN : { < OPEN_REFERENCE : "<(" > }
TOKEN : { < CLOSE_REFERENCE : ")>" > }

/*
*/
Token Name():
{
	Token t ;
}
{
	t = <CONSTANT>
	{jjtThis.value = t.image; return t;}
}

/*
data type name
*/
SimpleNode DataTypeName() #DATATYPENAME:
{
	String value = "";
	Token t;
}
{
	(
(t=<CONSTANT> {value=value+t.image;}) (t=<CONSTANT> {value=value+t.image;} | "." {value=value+".";})*
	)
	{jjtThis.value=value;   return jjtThis;}
} 

/*
variable name
*/
SimpleNode VariableName() #VAIRALBENAME:
{
	String value = "";
	Token t;
}
{
	(
(t=<CONSTANT> {value=value+t.image;}) (t=<CONSTANT> {value=value+t.image;} | "." {value=value+".";})*
	)
	{jjtThis.value=value;   return jjtThis;}
} 

/*
constant name
*/
SimpleNode ConstantName() #CONSTANTNAME:
{
	String value = "";
	Token t;
}
{
	(
(t=<CONSTANT> {value=value+t.image;}) (t=<CONSTANT> {value=value+t.image;} | "." {value=value+".";})*
	)
	{jjtThis.value=value;   return jjtThis;}
} 

/*
reference name
*/
SimpleNode ReferenceName() #REFERENCENAME:
{
	String value = "";
	Token t;
}
{
	(
(t=<CONSTANT> {value=value+t.image;}) (t=<CONSTANT> {value=value+t.image;} | "." {value=value+".";})*
	)
	{jjtThis.value=value;   return jjtThis;}
} 


/*
constant data, any format allowed, json, string literal, ...
*/
SimpleNode Constant() #CONSTANT:
{
}
{
	<OPEN_CONSTANT>  ConstantName()  <CLOSE_CONSTANT>
	{return jjtThis;}
}

/*
data type, it is appeared when do data type function call
*/
SimpleNode DataType() #DATATYPE:
{
}
{
	<OPEN_DATATYPE>  DataTypeName()  <CLOSE_DATATYPE>
	{return jjtThis;}
}

/*
variable in expression. 
*/
SimpleNode Variable() #VARIABLE:
{
}
{
	<OPEN_VARIABLE>	VariableName()  <CLOSE_VARIABLE>
	{return jjtThis;}
}

/*
parm name in expression. 
*/
SimpleNode ParmName() #PARMNAME:
{
	String value = "";
	Token t;
}
{
	(
(t=<CONSTANT> {value=value+t.image;}) (t=<CONSTANT> {value=value+t.image;} | "." {value=value+".";})*
	)
	{jjtThis.value=value;   return jjtThis;}
} 

/*
reference in expression. 
*/
SimpleNode Reference() #REFERENCE:
{
}
{
	<OPEN_REFERENCE> ReferenceName()  <CLOSE_REFERENCE>
	{return jjtThis;}
}

/*
operation parm
*/
SimpleNode Parameter(String index) #PARAMETER:
{
	int i = Integer.valueOf(index);
}
{
	(
		ParmName() <COLON> Expression(String.valueOf(i))
		|	
		Expression(String.valueOf(i))
	)
	{jjtThis.value=index;   return jjtThis;}
} 


/*
represent any expression
*/
SimpleNode Expression(String index) #EXPRESSION:
{
	int i = 0;
}
{
	(
		Variable() Expression1()
		|
		Constant () Expression1()
		|
		Reference () Expression1()
		|
		DataType() "." Name() 
		<OPEN_PAR> [(Parameter(String.valueOf(i)) {i++;})
		(<COMMAR> Parameter(String.valueOf(i))  {i++;})*]	
		<CLOSE_PAR> Expression1()
	)
	{jjtThis.value=index;   return jjtThis;}
}

/*
it is create to avoid left recursion.
*/
SimpleNode Expression1() #EXPRESSION1:
{
	int i = 0;
}
{
	(
		"." Name() 
		(
			[<OPEN_PAR> [(Parameter(String.valueOf(i)) {i++;}) (<COMMAR> Parameter(String.valueOf(i)) {i++;})*]<CLOSE_PAR> {jjtThis.value="function";}] Expression1()
		)
		|
		{}
	)
	{return jjtThis;}
}

