/* Generated By:JJTree&JavaCC: Do not edit this line. HAPCriteriaParserGeneratedConstants.java */
/* define the package name for parser classes */
package com.nosliw.data.imp.criteria.parser.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HAPCriteriaParserGeneratedConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int START_EXPRESSION = 1;
  /** RegularExpression Id. */
  int END_EXPRESSION = 2;
  /** RegularExpression Id. */
  int START_IDS = 3;
  /** RegularExpression Id. */
  int END_IDS = 4;
  /** RegularExpression Id. */
  int START_OR = 5;
  /** RegularExpression Id. */
  int END_OR = 6;
  /** RegularExpression Id. */
  int START_SUBCRITERIA_OPEN = 7;
  /** RegularExpression Id. */
  int END_SUBCRITERIA_OPEN = 8;
  /** RegularExpression Id. */
  int START_SUBCRITERIA_CLOSE = 9;
  /** RegularExpression Id. */
  int END_SUBCRITERIA_CLOSE = 10;
  /** RegularExpression Id. */
  int START_REFERENCE = 11;
  /** RegularExpression Id. */
  int END_REFERENCE = 12;
  /** RegularExpression Id. */
  int START_RANGE = 13;
  /** RegularExpression Id. */
  int END_RANGE = 14;
  /** RegularExpression Id. */
  int START_AND = 15;
  /** RegularExpression Id. */
  int END_AND = 16;
  /** RegularExpression Id. */
  int COMMAR = 17;
  /** RegularExpression Id. */
  int ASSIGNMENT = 18;
  /** RegularExpression Id. */
  int RANGE = 19;
  /** RegularExpression Id. */
  int ANY = 20;
  /** RegularExpression Id. */
  int NAME = 21;
  /** RegularExpression Id. */
  int STRING_LITERAL = 22;
  /** RegularExpression Id. */
  int DOUBLE_STRING_CHARACTERS = 23;
  /** RegularExpression Id. */
  int SINGLE_STRING_CHARACTERS = 24;
  /** RegularExpression Id. */
  int DOUBLE_STRING_CHARACTER = 25;
  /** RegularExpression Id. */
  int SINGLE_STRING_CHARACTER = 26;
  /** RegularExpression Id. */
  int CHARACTER_ESCAPE_SEQUENCE = 27;
  /** RegularExpression Id. */
  int SINGLE_ESCAPE_CHARACTER = 28;
  /** RegularExpression Id. */
  int NON_ESCAPE_CHARACTER = 29;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_REGEX = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"@||\"",
    "\"||@\"",
    "\"#||\"",
    "\"||#\"",
    "\"^||\"",
    "\"||^\"",
    "\"%||\"",
    "\"||%\"",
    "\"%%||\"",
    "\"||%%\"",
    "\"~||\"",
    "\"||~\"",
    "\"`||\"",
    "\"||`\"",
    "\"-||\"",
    "\"||-\"",
    "\",\"",
    "\":\"",
    "\"-\"",
    "\"*\"",
    "<NAME>",
    "<STRING_LITERAL>",
    "<DOUBLE_STRING_CHARACTERS>",
    "<SINGLE_STRING_CHARACTERS>",
    "<DOUBLE_STRING_CHARACTER>",
    "<SINGLE_STRING_CHARACTER>",
    "<CHARACTER_ESCAPE_SEQUENCE>",
    "<SINGLE_ESCAPE_CHARACTER>",
    "<NON_ESCAPE_CHARACTER>",
  };

}
